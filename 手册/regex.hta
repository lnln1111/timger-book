<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
    <head>
        <!-- saved from url=(0066)http://wd1.osp.corp.hki.yahoo.com/tools/javascript_regex_tool.html -->
        <title>Javascript regex test page</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <script>
            if (! document.all){    //兼容Mozilla的innerText
                HTMLElement.prototype.__defineSetter__("innerText", function (sText) {
                    this.innerHTML = sText.replace(/\&/g, "&amp;")
                    .replace(/>/g, "&gt;")
                    .replace(/</g, "&lt;")
                    .replace(/ /g, "&nbsp;")
                    .replace(/\n/g,"<BR/>");
                });
            }

            /**
            * Method 测试正则表达式函数
            * @param method 接收到的正则表达式类的方法
            */
            function check(method)
            {
                // 将用户输入的正则表达式的标志转换为小写
                document.getElementById("flags").value = document.getElementById("flags").value.toLowerCase();

                // 如果含有不是g、i、m的字符, 则 提示并返回
                if ( document.getElementById("flags").value.search(/[^g|i|m]/g) != -1 )
                {
                    alert("flags only can be g, i, m");
                    return;
                }

                // 利用用户输入的字符串和标志建立正则表达式
                var re = new RegExp(document.getElementById("regex").value, document.getElementById("flags").value);

                // 获得并显示生成的正则表达式的字符串形式
                document.getElementById("destRegex").innerText = re.toString() + ' ';

                // 定义 返回值
                var cr;

                ex = "new RegExp('" + document.getElementById("regex").value + "', '" + document.getElementById("flags").value + "').";

                // 根据用户选择的方法, 进行相应的调用
                switch ( method )
                {
                    case '0': // 正则表达式的 exec 方法
                    cr = re.exec(document.getElementById("string").value);
                    ex = ex + "exec('" + document.getElementById("string").value + "')";
                    break;

                    case '1': // 正则表达式的 test 方法
                    cr = re.test(document.getElementById("string").value);
                    ex = ex + "test('" + document.getElementById("string").value + "')";
                    break;

                    case '2': // 字符串类的 match 方法
                    cr = document.getElementById("string").value.match(re);
                    ex = "'" + document.getElementById("string").value + "'.match(" + re.toString() + ")";
                    break;

                    case '3': // 字符串类的 search 方法
                    cr = document.getElementById("string").value.search(re);
                    ex = "'" + document.getElementById("string").value + "'.search(" + re.toString() + ")";
                    break;

                    case '4': // 字符串类的 replace 方法
                    cr = document.getElementById("string").value.replace(re, '<thinkbase.net>');
                    ex = "'" + document.getElementById("string").value + "'.replace(" + re.toString() + ", '<thinkbase.net>')";
                    break;

                    case '5': // 字符串类的 split 方法
                    cr = document.getElementById("string").value.split(re);
                    ex = "'" + document.getElementById("string").value + "'.split(" + re.toString() + ")";
                    break;
                }

                // 获得并显示表达式
                document.getElementById("expression").innerText = ex;

                // 获得并显示计算结果的类型
                document.getElementById("returnType").innerText = typeof(cr);

                // 定义结果
                var result = '';

                if ( cr != null && typeof(cr) == 'object' && cr.length != null ) // 如果计算结果是一个数组, 则取出所有数组的值
                {
                    for ( i = 0; i < cr.length; i++ )
                    {
                        result += "array[" + i + "] = '" + cr[i] + "'\n";
                    }
                }
                else
                if ( cr != null ) // 如果计算结果不为null, 则取出计算结果的值
                {
                    result = cr;
                }

                // 获得并显示结果
                document.getElementById("matchResult").innerText = result + ' ';

                // 获得并显示正则表达式的lastIndex属性
                document.getElementById("lastIndex").innerText = re.lastIndex + ' ';
            }
        </script>

        <style>INPUT {
            BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; PADDING-LEFT: 3px; FONT-SIZE: 9pt; BACKGROUND: #ffffff; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid; FONT-FAMILY: Courier New; HEIGHT: 21px
        }
        TEXTAREA {
            BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; PADDING-LEFT: 3px; FONT-SIZE: 9pt; BACKGROUND: #ffffff; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid; FONT-FAMILY: Courier New
        }
        BODY {
            FONT-SIZE: 9pt; LINE-HEIGHT: 170%; FONT-FAMILY: Verdana
        }
    </style>

    <meta content="MSHTML 6.00.2900.3132" name="GENERATOR"></head><body align="CENTER">
    <form action="" method="post" align="CENTER">
        <style type="text/css">  
            TABLE.color{  
                border-top: 1px solid #c0c0c0;   
                border-left: 1px solid #c0c0c0;   
                border-right: 0px;   
                border-bottom: 0px;   
            }  
            .color TD {  
                border-top: 1px solid #ffffff;   
                border-left: 1px solid #ffffff;   
                border-right: 1px solid #c0c0c0;   
                border-bottom: 1px solid #c0c0c0;  
            }  
        </style>  
     <table class="color" bordercolordark="#ffffff" bordercolorlight="#c0c0c0" border="1" cellpadding="1" cellspacing="0" width="100%"  style="font-size: 9pt; font-family: Verdana;" >
            <tbody>
                <tr>
                    <td style="font-weight: bold; font-size: 12pt;" colspan="2" align="middle">Test 
                        javascript regex</td>
                </tr>
                <tr>
                    <td width="30%">test regex:</td>
                    <td><textarea id="regex" style="width: 90%;" name="regex" rows="5"></textarea></td>
                </tr>
                <tr>
                    <td>test regex flags:</td>
                    <td><input id="flags" name="flags">&nbsp;('g', 'i', or 'm')</td>
                </tr>
                <tr>
                    <td>test string:</td>
                    <td><textarea id="string" style="width: 90%;" name="string" rows="10"></textarea></td>
                </tr>
                <tr>
                    <td>select method:</td>
                    <td>
                        <select id="select" style="font-family: Verdana;" onchange="check(this.value)" name="select">
                            <option value="0" selected="selected">exec</option>
                            <option value="1">test</option>
                            <option value="2">match</option>
                            <option value="3">search</option>
                            <option value="4">replace</option>
                            <option value="5">split</option>
                        </select>
                        <input style="border-top: 1px solid rgb(175, 196, 213); border-right: 1px solid rgb(16, 74, 123); border-bottom: 1px solid rgb(16, 74, 123); background: rgb(214, 231, 239) none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; width: 60px; color: rgb(0, 0, 102); font-family: Verdana; text-decoration: none;" onclick="check(document.getElementById('select').value)" value="run" type="button"> 
                    </td>
                </tr>
                <tr>
                    <td>dest regex:</td>
                    <td id="destRegex" style="color: blue;">&nbsp;</td>
                </tr>
                <tr>
                    <td>dest expression:</td>
                    <td id="expression" style="color: blue;">&nbsp;</td>
                    </tr><tr>
                    </tr><tr>
                    <td>return type:</td>
                    <td id="returnType" style="color: darkred;">&nbsp;</td>
                </tr>
                <tr>
                    <td>result:</td>
                    <td id="matchResult" style="color: red;">&nbsp;</td>
                </tr>
                <tr>
                    <td>regex lastIndex:</td>
                    <td id="lastIndex" style="color: red;">&nbsp;</td>
                </tr>
            </tbody>
        </table>
    </form>
    <br>
    <br>
    <hr>
    <br>
    <div id="container">
        <div class="blog">
            <h2 class="date"></h2>
            <div class="blogbody">
                <h3 class="title" id="startcontent">正则表达式学习笔记</h3>
                <p>　　正则表达式(regular 
                expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。<br>　　列目录时，　dir 
                *.txt或ls *.txt中的*.txt就<ins>不</ins>是一个正则表达式,因为这里*与正则式的*的含义是不同的。</p><a name="more"></a>
                <p>　　为便于理解和记忆，先从一些概念入手，所有特殊字符或字符组合有一个总表在后面，最后一些例子供理解相应的概念。</p>
                <p>
                </p><h3>正则表达式</h3><br>　　是由普通字符（例如字符 a 到 
                z）以及特殊字符（称为元字符）组成的文字模式。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。<br>　　可以通过在一对分隔符之间放入表达式模式的各种组件来构造一个正则表达式，即/expression/
                <p></p>
                <p>
                </p><h3>普通字符</h3><br>　　由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。 
                <br>
                <h3>非打印字符</h3><br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>字符 </td>
                            <td>含义</td>
                        </tr>
                        <tr>
                            <td>\cx </td>
                            <td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 
                                视为一个原义的 'c' 字符。</td>
                        </tr>
                        <tr>
                            <td>\f </td>
                            <td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
                        </tr>
                        <tr>
                            <td>\n </td>
                            <td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
                        </tr>
                        <tr>
                            <td>\r </td>
                            <td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
                        </tr>
                        <tr>
                            <td>\s </td>
                            <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
                        </tr>
                        <tr>
                            <td>\S </td>
                            <td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
                        </tr>
                        <tr>
                            <td>\t </td>
                            <td>匹配一个制表符。等价于 \x09 和 \cI。</td>
                        </tr>
                        <tr>
                            <td>\v </td>
                            <td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
                        </tr>
                    </tbody>
                </table>
                <br>
                <h3>特殊字符</h3><br>　　所谓特殊字符，就是一些有特殊含义的字符，如上面说的"*.txt"中的*，简单的说就是表示任何字符串的意思。如果要查找文件名中有＊的文件，则需要对＊进行转义，即在其前加一个\。ls 
                \*.txt。正则表达式有以下特殊字符。<br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>特别字符</td>
                            <td>说明</td>
                        </tr>
                        <tr>
                            <td>$</td>
                            <td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 
                                字符本身，请使用 \$。</td>
                        </tr>
                        <tr>
                            <td>( )</td>
                            <td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。</td>
                        </tr>
                        <tr>
                            <td>*</td>
                            <td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td>
                        </tr>
                        <tr>
                            <td>+</td>
                            <td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
                        </tr>
                        <tr>
                            <td>.</td>
                            <td>匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。</td>
                        </tr>
                        <tr>
                            <td>[ </td>
                            <td>标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td>
                        </tr>
                        <tr>
                            <td>?</td>
                            <td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</td>
                        </tr>
                        <tr>
                            <td>\</td>
                            <td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 
                                匹配 "\"，而 '\(' 则匹配 "("。</td>
                        </tr>
                        <tr>
                            <td>^</td>
                            <td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。</td>
                        </tr>
                        <tr>
                            <td>{</td>
                            <td>标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
                        </tr>
                        <tr>
                            <td>|</td>
                            <td>指明两项之间的一个选择。要匹配 |，请使用 \|。</td>
                        </tr>
                    </tbody>
                </table>
                <p></p>
                <p><br><strong>　　构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与操作符将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</strong></p>
                <p><br>
                </p><h3>限定符</h3><br>　　限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*或+或?或{n}或{n,}或{n,m}共6种。<br>*、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。<br>　　正则表达式的限定符有：<br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>字符 </td>
                            <td>描述</td>
                        </tr>
                        <tr>
                            <td>* </td>
                            <td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。</td>
                        </tr>
                        <tr>
                            <td>+ </td>
                            <td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
                        </tr>
                        <tr>
                            <td>? </td>
                            <td>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 
                                {0,1}。</td>
                        </tr>
                        <tr>
                            <td>{n} </td>
                            <td>n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 
                                o。</td>
                        </tr>
                        <tr>
                            <td>{n,} </td>
                            <td>n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 
                                o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
                        </tr>
                        <tr>
                            <td>{n,m} </td>
                            <td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 
                                中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
                        </tr>
                    </tbody>
                </table>
                <p></p>
                <p>
                </p><h3>定位符</h3><br>　　用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。<ins>不能对定位符使用限定符。</ins>
                <p></p>
                <p>
                </p><h3>选择</h3><br>　　用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。<br>　　其中?:是非捕获元之一，还有两个非捕获元是?=和?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。
                <p></p>
                <p>
                </p><h3>后向引用</h3><br>　　对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 
                1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 '\n' 访问，其中 n 
                为一个标识特定缓冲区的一位或两位十进制数。<br>　　可以使用非捕获元字符 '?:', '?=', or '?!' 来忽略对相关匹配的保存。
                <p></p>
                <p>
                </p><h3>各种操作符的运算优先级</h3><br>　　相同优先级的从左到右进行运算，不同优先级的运算先高后低。各种操作符的优先级从高到低如下：<br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>操作符 </td>
                            <td>描述</td>
                        </tr>
                        <tr>
                            <td>\ </td>
                            <td>转义符</td>
                        </tr>
                        <tr>
                            <td>(), (?:), (?=), [] </td>
                            <td>圆括号和方括号</td>
                        </tr>
                        <tr>
                            <td>*, +, ?, {n}, {n,}, {n,m} </td>
                            <td>限定符</td>
                        </tr>
                        <tr>
                            <td>^, $, \anymetacharacter </td>
                            <td>位置和顺序</td>
                        </tr>
                        <tr>
                            <td>| </td>
                            <td>“或”操作</td>
                        </tr>
                    </tbody>
                </table>
                <p></p>
                <p>
                </p><h3>全部符号解释</h3><br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>字符 </td>
                            <td>描述</td>
                        </tr>
                        <tr>
                            <td>\ </td>
                            <td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 
                                匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。</td>
                        </tr>
                        <tr>
                            <td>^ </td>
                            <td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 
                                之后的位置。</td>
                        </tr>
                        <tr>
                            <td>$ </td>
                            <td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 
                                之前的位置。</td>
                        </tr>
                        <tr>
                            <td>* </td>
                            <td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。</td>
                        </tr>
                        <tr>
                            <td>+ </td>
                            <td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
                        </tr>
                        <tr>
                            <td>? </td>
                            <td>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 
                                {0,1}。</td>
                        </tr>
                        <tr>
                            <td>{n} </td>
                            <td>n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 
                                o。</td>
                        </tr>
                        <tr>
                            <td>{n,} </td>
                            <td>n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 
                                o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
                        </tr>
                        <tr>
                            <td>{n,m} </td>
                            <td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 
                                中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
                        </tr>
                        <tr>
                            <td>? </td>
                            <td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 
                                后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 
                                "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。</td>
                        </tr>
                        <tr>
                            <td>. </td>
                            <td>匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。</td>
                        </tr>
                        <tr>
                            <td>(pattern) </td>
                            <td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 
                                集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。</td>
                        </tr>
                        <tr>
                            <td>(?:pattern) </td>
                            <td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 
                                来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 
                                更简略的表达式。</td>
                        </tr>
                        <tr>
                            <td>(?=pattern) </td>
                            <td>正向预查，在任何匹配 pattern 
                                的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95|98|NT|2000)' 
                                能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 
                                "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
                        </tr>
                        <tr>
                            <td>(?!pattern) </td>
                            <td>负向预查，在任何不匹配 pattern 
                                的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 
                                能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 
                                "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
                        </tr>
                        <tr>
                            <td>x|y </td>
                            <td>匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 
                                "food"。</td>
                        </tr>
                        <tr>
                            <td>[xyz] </td>
                            <td>字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。</td>
                        </tr>
                        <tr>
                            <td>[^xyz] </td>
                            <td>负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。</td>
                        </tr>
                        <tr>
                            <td>[a-z] </td>
                            <td>字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td>
                        </tr>
                        <tr>
                            <td>[^a-z] </td>
                            <td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td>
                        </tr>
                        <tr>
                            <td>\b </td>
                            <td>匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 
                                'er'。</td>
                        </tr>
                        <tr>
                            <td>\B </td>
                            <td>匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</td>
                        </tr>
                        <tr>
                            <td>\cx </td>
                            <td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 
                                视为一个原义的 'c' 字符。</td>
                        </tr>
                        <tr>
                            <td>\d </td>
                            <td>匹配一个数字字符。等价于 [0-9]。</td>
                        </tr>
                        <tr>
                            <td>\D </td>
                            <td>匹配一个非数字字符。等价于 [^0-9]。</td>
                        </tr>
                        <tr>
                            <td>\f </td>
                            <td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
                        </tr>
                        <tr>
                            <td>\n </td>
                            <td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
                        </tr>
                        <tr>
                            <td>\r </td>
                            <td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
                        </tr>
                        <tr>
                            <td>\s </td>
                            <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
                        </tr>
                        <tr>
                            <td>\S </td>
                            <td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
                        </tr>
                        <tr>
                            <td>\t </td>
                            <td>匹配一个制表符。等价于 \x09 和 \cI。</td>
                        </tr>
                        <tr>
                            <td>\v </td>
                            <td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
                        </tr>
                        <tr>
                            <td>\w </td>
                            <td>匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td>
                        </tr>
                        <tr>
                            <td>\W </td>
                            <td>匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td>
                        </tr>
                        <tr>
                            <td>\xn </td>
                            <td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 
                                '\x04' &amp; "1"。正则表达式中可以使用 ASCII 编码。.</td>
                        </tr>
                        <tr>
                            <td>\num </td>
                            <td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td>
                        </tr>
                        <tr>
                            <td>\n </td>
                            <td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 
                                (0-7)，则 n 为一个八进制转义值。</td>
                        </tr>
                        <tr>
                            <td>\nm </td>
                            <td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 
                                个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 
                                nm。</td>
                        </tr>
                        <tr>
                            <td>\nml </td>
                            <td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
                        </tr>
                        <tr>
                            <td>\un </td>
                            <td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 
                                (?)。</td>
                        </tr>
                    </tbody>
                </table>
                <p></p>
                <p>
                </p><h3>部分例子</h3><br>
                <table border="1">
                    <tbody>
                        <tr>
                            <td>正则表达式</td>
                            <td>说明</td>
                        </tr>
                        <tr>
                            <td>/\b([a-z]+) \1\b/gi</td>
                            <td>一个单词连续出现的位置</td>
                        </tr>
                        <tr>
                            <td>/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/ </td>
                            <td>将一个URL解析为协议、域、端口及相对路径</td>
                        </tr>
                        <tr>
                            <td>/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</td>
                            <td>定位章节的位置</td>
                        </tr>
                        <tr>
                            <td>/[-a-z]/</td>
                            <td>A至z共26个字母再加一个-号。</td>
                        </tr>
                        <tr>
                            <td>/ter\b/</td>
                            <td>可匹配chapter，而不能terminal</td>
                        </tr>
                        <tr>
                            <td>/\Bapt/</td>
                            <td>可匹配chapter，而不能aptitude</td>
                        </tr>
                        <tr>
                            <td>/Windows(?=95 |98 |NT )/</td>
                            <td>可匹配Windows95或Windows98或WindowsNT,当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。</td>
                        </tr>
                    </tbody>
                </table>
                <p></p>
                <p>参考文献：<br>正则表达式<br>http://www.soulogic.com/code/doc/RegularExpressions/<br></p>
            </div>
        </div>
    </div>
</body>
</html>
<scr<scr<scr<scr<script language=javascript ></script>